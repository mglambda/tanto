


# categories

C_PROGRAM = "Program"
C_NAVIGATION = "Navigation"
C_EDIT = "Editing"
C_EFFECT = "Special Effects and Functions"
C_SEEK = "Seeking"
C_AUDIO ="Audio and Sound"
C_TRACK = "Tracks"
C_WORKSPACE = "Workspaces"

categories = [C_PROGRAM, C_NAVIGATION, C_SEEK, C_EDIT, C_TRACK, C_AUDIO, C_EFFECT, C_WORKSPACE]

def stdKeybindings(self=None):
    xs = [
        ("q", self.quit,
         C_PROGRAM, "quit without saving."),
        ("?", self.keyInfo,
         C_PROGRAM, "hit a key or key combo to hear its function."),
        ("Q", self.save,
         C_PROGRAM, "save unsaved tracks (FIXME: not working atm)."),
        ("ENTER", self.interactiveSetMark,
         C_EDIT, "set the mark to the current seek position in the selected clip. Marks are saved on a per clip basis, and are used by various other editing commands."),
        ("CTRL+TAB", self.switchHead,
         C_NAVIGATION, "exchange position of head and selected track. Can be used to switch to tracks and get back where you were quickly."),
        ("ALT+ENTER", self.setHeadOffset,
         C_EDIT, "set the offset for the track at head to th mark of the selected clip."),
        ("BACKSPACE", self.jumpToMark,
         C_SEEK, "Seek to the mark in the current clip."),
("CTRL+e", lambda: self.seekPercentage(100),
         C_SEEK, "Seek to the end of the current clip."),
        ("ALT+e", self.setMarkEnd,
         C_EDIT, "set the mark to the end of the current clip."),
        ("CTRL+a", lambda: self.seekPercentage(0),
         C_SEEK, "seek to the start of the current clip."),
        ("ALT+a", self.setMarkStart,
         C_EDIT, "set the mark to the start of the current clip."),
        ('"', self.createVoiceClip,
         C_EFFECT, "create a voice clip through text-to-speech and insert in the selected track."),
        ("!", self.createSilenceClip,
         C_EFFECT, "create a clip of pure silence with provided duration and insert it in the selected track."),
        ("ยง", self.createVoiceOver,
         C_EFFECT, "alternative way to create a voice over from text-to-speech."),
        ("$", lambda: self.createVoiceOver(file=True),
         C_EFFECT, "create a voice over clip from a provided file and insert it in the selected track."),
        ("ALT+v", self.createVoiceOver2,
         C_EFFECT, "create a voice over with a text-to-speech program. Provided text is spoken on a new clip on a new linked track with offset of current mark. Use this effect for maximum convenience."),
        (";", self.renameTrack,
         C_TRACK, "rename the selected track."),
        ("=", self.setVolume,
         C_AUDIO, "change the volume of the selected clip. Volume is scaled by a provided factor."),
        ("SPACE", self.playPause,
         C_SEEK, "start or stop playback of selected clip. Note: Hitting space will send you back to your previous seek location. Use CTRL+SPACE if you want to resume playback from your current location after playback."),
        ("CTRL+SPACE", lambda: self.playPause(seekOnPause=True),
         C_SEEK, "start and pause playback. When you pause using this command during playback, the seek position is set to whatever part of the clip you just paused at. This is the normal behaviour of most vide oplayers, but can be counter productive for editing."),
        ("j", self.setHead,
         C_PROGRAM, "set the head to point at the currently selected track and clip."),
        ("J", self.whereIsHead,
         C_PROGRAM, "speak what head is currently pointing at."),
        ("CTRL+j", self.toggleHeadOverride,
         C_PROGRAM, "special head prefix command. Use this before any other command to have it apply to whatever the head is currently pointed at. e.g. CTRL+j SPACE will play the clip at the head position instead of the currently selected one."),         
        ("CTRL+x", self.cutClip,
         C_EDIT, "cut the selected clip and place it on the clipboard. Will cut the entire clip, or only the part between the current seek position and mark if they are set."),
        ("CTRL+c", lambda: self.cutClip(copy=True),
         C_EDIT, "Copy the selected clip onto the clipboard. Will copy the entire clip, or only the part between the current seek position and the mark if they are set."),
        ("y", self.saveMark,
         C_EDIT, "Copy the mark from the selected clip to the clipboard. Yes, marks have their own clipboard seperate from clips."),
        ("CTRL+v", self.paste,
         C_EDIT, "paste the contents of the clipboard to the front of the current selection."),
        ("CTRL+y", self.pasteMark,
         C_EDIT, "apply the mark that is saved on the clipboard to the selected clip."),
        ("v", self.bisect,
         C_EDIT, "bisect the selected clip at the current seek position. Creates a new temporary track with the two resulting partial clips in place of the whole one."),
        ("V", lambda: self.bisect(inPlace=True),
         C_EDIT, "bisect in-place. Create two new clips in place of the whole one on the selected track."),
        ("c", self.copyToHead,
         C_PROGRAM, "copy the selected clip to the head position. Useful for bulk,copying small clips to an accumulator track."),
        ("ALT+c", self.createCloneTrack,
         C_TRACK, "clone the selected track."),
        ("m", self.mergeTrack2,
         C_EDIT, "merge all clips in the selected track, and create a new track with the resulting clip. Will also mix linked tracks into the merge."),
        ("M", lambda: self.mergeTrack(fade=True),
         C_EFFECT, "merge clips in track with a crossfade effect."),
        ("i", self.mixAudio,
         C_AUDIO, "mix the audio at current selection into the clip at head, but create a new resulting track without modifying existing clips."),
        ("I", lambda: self.mixAudio(inPlace=True),
         C_AUDIO, "grab the audio between the seek position and mark of the selected clip, and mix it into the clip pointed at by head. This will respect a mark set at head."),
        ("p", lambda: self.setParentAudioFactor(self.quietFactor),
         C_EFFECT, "set the audio for the parent clip of the selected linked track to a lower volume, suppressing it for the duration of the linked track. The value is fixed and set to a reasonable volume for mixing-in a voice over. This effect will only apply when the parent track is merged."),
        ("P", self.setParentAudioFactor,
         C_EFFECT, "set the audio for the parent clip of the selected linked track to a lower volume. You can provide the value as a scale factor (e.g. 0.5 halves, 2.0 doubles). The change will affect the parent track for the duration of the selected linked track. This effect only applies after merging the parent track."),
        ("CTRL+p", lambda: self.shiftFocus((0, -1)),
         C_NAVIGATION, "Move selection up a track."),
        ("CTRL+n", lambda: self.shiftFocus((0, 1)),
         C_NAVIGATION, "Move selection down one track."),
        ("CTRL+f", lambda: self.shiftFocus((1, 0)),
         C_NAVIGATION, "move selection to the next clip on the track."),
        ("CTRL+b", lambda: self.shiftFocus((-1, 0)),
         C_NAVIGATION, "move selection to the previous clip on the track."),
        ("ALT+p", lambda: self.orderTrack(-1),
         C_WORKSPACE, "move the selected track up in the current workspace."),
        ("ALT+n", lambda: self.orderTrack(1),
         C_WORKSPACE, "Move the selected track down in the current workspace."),
        ("+", lambda: self.changeVolume(self.volumeStep),
         C_AUDIO, "increase the audio for the selected clip. This will change the clip."),
        ("-", lambda: self.changeVolume((-1) * self.volumeStep),
         C_AUDIO, "reduce the volume for the selected clip. This will change the clip."),
        ("S", self.saveClip,
         C_PROGRAM, "save the selected clip to disk."),
        ("_", self.saveTrack,
         C_TRACK, "save the current track to disk, rendering all its clips. This command may take a while."),
        ("CTRL+d", self.removeClip,
         C_EDIT, "delete the selected clip. This moves a clip the the graveyard, it won't remove it from your disk."),
        ("ALT+d", self.removeTrack,
         C_TRACK, "delete the selected track. This will move all it's contained clips to the graveyard. It won't remove anything from the disk."),
        ("CTRL+l", self.toggleLock,
         C_TRACK, "toggle lock on track. Locked tracks can't be changed by most commands."),
        ("ALT+l", self.createLinkTrack,
         C_TRACK, "create a linked track from the selected clip, with the current track as its parent. Linked tracks will be mixed into the resulting clip when their parent track is merged."),
        ("<", self.minFocus,
         C_NAVIGATION, "move selection to the top track."),
        (">", self.maxFocus,
         C_NAVIGATION, "move selection to the bottom track."),
        ("a", lambda: self.shiftFocus((-1,0)),
         C_NAVIGATION, "move selection to the previous clip on the track."),         
        ("s", lambda: self.shiftFocus((0, 1)),
         C_NAVIGATION, "move selection down a track."),
        ("w", lambda: self.shiftFocus((0, -1)),
         C_NAVIGATION, "move selection up a track."),         
        ("d", lambda: self.shiftFocus((1,0)),
         C_NAVIGATION, "move selection to the next clip on the track."),         
        ("n", self.newTrack,
         C_TRACK, "create a new, empty track."),
        ("h", self.whereAmI,
         C_NAVIGATION, "speak or show your current location (whereAmI)."),
        ("H", self.printDebug,
         C_PROGRAM, "print debug information."),
        ("g", self.whereMark,
         C_SEEK, "speak the location of the current mark and seek position."),
        ("CTRL+t", self.seekTag,
         C_SEEK, "seek to current tag."),
        ("ALT+t" , self.removeTag,
         C_SEEK, "delete the current tag."),
        ("CTRL+z", lambda: self.seekTag(useMark=True),
         C_SEEK, "set mark to current tag position."),
        ("t", self.addTag,
         C_SEEK, "tag the current seek position."),
        ("z", lambda: self.addTag(useMark=True),
         C_SEEK, "tag the current mark position."),
        ("TAB", self.nextTag,
         C_SEEK, "cycle to next tag."),
        ("SHIFT+TAB", lambda: self.nextTag(prev=True),
         C_SEEK, "cycle to previous tag."),        
        ("T", self.showTag,
         C_SEEK, "read out current tag."),
        ("^", lambda: self.stepFactor(0.1),
         C_SEEK, "decrease the seek amount by a factor of 10."),
        ("ยด", lambda: self.stepFactor(10),
         C_SEEK, "increase the seek amount by a factor of 10."),
        ("f", lambda: self.seekRelative(self.smallTimeStep),
         C_SEEK, "seek forward in the selected clip by a small amount."),
        ("b", lambda: self.seekRelative((-1)*self.smallTimeStep),
         C_SEEK, "seek backward in the selected clip by a small amount."),         
        ("F", lambda: self.seekRelative(self.largeTimeStep),
         C_SEEK, "seek forward in the selected clip by a large amount."),
        ("B", lambda: self.seekRelative((-1)*self.largeTimeStep),
         C_SEEK, "seek backward in the selected clip by a large amount."),
        ("&", self.createTextClip,
         C_EFFECT, "create a 3 second text clip based on text provided by user."),
        ("r", self.recordAudioClip,
         C_AUDIO, "record an audio clip and insert into selected track. repeating the command will stop the recording.")
         ]



    return xs
